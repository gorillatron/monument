

<div class="podcasts row">

  <%
    !(function(){

      function chunk(array, chunkSize) {
        return [].concat.apply([],
          array.map(function(elem,i) {
            return i%chunkSize ? [] : [array.slice(i,i+chunkSize)]
          })
        )
      }

      var rows = chunk(podcasts, 4)

      rows.forEach(function(row) {
      %>

        <div class="row">

          <%
          row.forEach(function(podcast){
          %>

            <div class="col-xs-6 col-sm-3 podcast" itemscope itemtype="http://schema.org/MusicComposition">
              <a href="<%= podcast.soundcloudTrack.permalink_url%>" target="_blank">

                <img class="artwork" src="<%=podcast.soundcloudTrack.artwork_url%>" alt="" />

                <h5 itemprop="name">
                  <%=podcast.soundcloudTrack.title.replace('Monument', '')%>
                </h5>

                <div itemprop="composer" itemprop="creator" itemprop="producer" style="display: none;">
                  <%=podcast.soundcloudTrack.title.replace('Monument', '').replace(/\d+\:/, '').trim()%>
                </div>

                <div itemprop="audience" style="display: none;">
                  ravers, freaks, everyone, old, young, sick and healthy
                </div>

                <div itemprop="genre" style="display: none;">
                  techno mix
                </div>

                <div itemprop="label" style="display: none;">
                  Monument
                </div>

              </a>
            </div>

            <%
          })
          %>

        </div>
        <%

      })

    })();
  %>


  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
  <script src="/js/dependencies/velocity.min.js"></script>
  <script src="/js/dependencies/velocity.ui.js"></script>

  <script src="https://cdn.rawgit.com/caolan/highland/2.5.1/dist/highland.js"></script>

  <script type="text/javascript">

    var Y = highland

    var $podcasts = (
      $('.podcast')
        .toArray()
        .map(function(podcast){
          return $(podcast)
        })
    )

    var Y$podcasts = Y($podcasts)


    var loads = Y(function(push, next) {

      var index = 0
      var count = $podcasts.length

      Y$podcasts.each(function($podcast) {

        $podcast.find('img.artwork').one("load", function() {

          index++

          push(null, {
            index: index,
            el: $podcast
          })

        })
        .each(function() {
          if(this.complete) {
            $(this).load()
          }
        })
      })
    })


    loads.each(function(podcast) {
      podcast
        .el
        .delay(podcast.index * 33)
        .velocity("transition.expandIn", 380)
    })



    var Ywindowsize = Y(function(push) {

      var win = $(window)

      function size() {
        return { height: win.height(), width: win.width() }
      }

      push(null, size())

      win.on('resize', function(){
        push(null, size())
      })
    })


    var Ywindowcenter = (
      Ywindowsize
        .fork()
        .map(function(size) {
          return { x: size.width / 2, y: size.height / 2 }
        })
        .latest()
    )


    var Ymouseposition = Y(function(push) {

      var doc = $(document)

      function position(event) {
        return { x: event.pageX, y: event.pageY }
      }

      doc.on('mousemove', function(event) {
        push(null, position(event))
      })
    })


    var Ycenterdelta = (
      Ymouseposition
        .zip(Ywindowcenter)
        .map(function(poscent) {

          var position = poscent[0]
          var center = poscent[1]

          var xdelta = center.x - position.x
          var ydelta = center.y - position.y


          return { x: xdelta, y: ydelta }
        })
    )

    //
    // var Yparallax = function(stream) {
    //   return Y(function(push) {
    //     stream
    //       .fork()
    //       .each(function(delta) {
    //         push(null, delta)
    //       })
    //   })
    // }


    Ycenterdelta
      .fork()
      .throttle(20)
      .through(function(delta) {
        return Y(function(push, next) {
          push(null, {
            run: function() {

              $('#wrapper-1').velocity({
                translateY: (delta.y / 100) + 'px',
                translatex: (delta.x / 100) + 'px'
              }, {
                duration: 33
              })

            }
          })
        })
      })
      .series()
      .each(function(animation) {
        console.log(animation)
        //animation.run()
      })

    Ycenterdelta.resume()



  </script>

</div>
